{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Documents\\\\UCF\\\\Sandbox\\\\shop-shop-redux\\\\client\\\\src\\\\components\\\\CategoryMenu\\\\index.js\";\nimport React, { useEffect } from \"react\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\"; // import { useStoreContext } from '../../utils/GlobalState';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  // const [state, dispatch] = useStoreContext();\n  // const { categories } = state;\n  const categories = useSelector(state => state.categories);\n  const dispatch = useDispatch();\n  const {\n    loading,\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES);\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our stat for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, \"Choose a Category:\"), categories.map(item => /*#__PURE__*/React.createElement(\"button\", {\n    key: item._id,\n    onClick: () => {\n      handleClick(item._id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, item.name)));\n}\n\nexport default CategoryMenu;","map":{"version":3,"sources":["C:/Users/Owner/Documents/UCF/Sandbox/shop-shop-redux/client/src/components/CategoryMenu/index.js"],"names":["React","useEffect","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","useQuery","QUERY_CATEGORIES","useSelector","useDispatch","idbPromise","CategoryMenu","categories","state","dispatch","loading","data","categoryData","type","forEach","category","then","handleClick","id","currentCategory","map","item","_id","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,iBAAT,EAA4BC,uBAA5B,QAA2D,qBAA3D;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,gBAAT,QAAiC,qBAAjC,C,CACA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAEA,SAASC,YAAT,GAAwB;AACtB;AACA;AACA,QAAMC,UAAU,GAAGJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACD,UAAhB,CAA9B;AACA,QAAME,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAM;AAAEM,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAEC;AAAjB,MAAkCX,QAAQ,CAACC,gBAAD,CAAhD;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIc,YAAJ,EAAkB;AAClB;AACEH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEd,iBADC;AAEPQ,QAAAA,UAAU,EAAEK,YAAY,CAACL;AAFlB,OAAD,CAAR;AAIAK,MAAAA,YAAY,CAACL,UAAb,CAAwBO,OAAxB,CAAgCC,QAAQ,IAAI;AAC1CV,QAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,EAAsBU,QAAtB,CAAV;AACD,OAFD;AAGD,KATD,MASO,IAAI,CAACL,OAAL,EAAc;AACnBL,MAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,CAAV,CAAgCW,IAAhC,CAAqCT,UAAU,IAAI;AACjDE,QAAAA,QAAQ,CAAC;AACPI,UAAAA,IAAI,EAAEd,iBADC;AAEPQ,UAAAA,UAAU,EAAEA;AAFL,SAAD,CAAR;AAID,OALD;AAMD;AACF,GAnBQ,EAmBN,CAACK,YAAD,EAAeF,OAAf,EAAwBD,QAAxB,CAnBM,CAAT;;AAqBA,QAAMQ,WAAW,GAAGC,EAAE,IAAI;AACxBT,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEb,uBADC;AAEPmB,MAAAA,eAAe,EAAED;AAFV,KAAD,CAAR;AAID,GALD;;AAOA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEGX,UAAU,CAACa,GAAX,CAAeC,IAAI,iBAClB;AACE,IAAA,GAAG,EAAEA,IAAI,CAACC,GADZ;AAEE,IAAA,OAAO,EAAE,MAAM;AACbL,MAAAA,WAAW,CAACI,IAAI,CAACC,GAAN,CAAX;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGD,IAAI,CAACE,IANR,CADD,CAFH,CADF;AAeD;;AAED,eAAejB,YAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  // const [state, dispatch] = useStoreContext();\n  // const { categories } = state;\n  const categories = useSelector(state => state.categories);\n  const dispatch = useDispatch();\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n    // execute our dispatch function with our action object indicating the type of action and the data to set our stat for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n"]},"metadata":{},"sourceType":"module"}