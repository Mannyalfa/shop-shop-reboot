{"ast":null,"code":"export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n\n  return name + 's';\n}\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1); // create variables to hold reference to the database, transaction (tx), and object store\n\n    let db, tx, store; // if version has changed (or if this is the first time using the database), run this method and create the three object stores\n\n    request.onupgradeneeded = function (e) {\n      const db = request.result; // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n\n      db.createObjectStore('products', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('categories', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('cart', {\n        keyPath: '_id'\n      });\n    }; // handle any errors with connecting\n\n\n    request.onerror = function (err) {\n      console.log('There was an error');\n      console.error(err);\n    }; // on database open success\n\n\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result; // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n\n      tx = db.transaction(storeName, 'readwrite'); // save a reference to that object store\n\n      store = tx.objectStore(storeName); // in case of errors, let us know\n\n      db.onerror = function (err) {\n        console.log('error', err);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n\n        case 'get':\n          const all = store.getAll();\n\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n\n          break;\n\n        case 'delete':\n          store.delete(object._id);\n          break;\n\n        default:\n          console.log('No valid method');\n          break;\n      } // when the transaction is complete, close the connection\n\n\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}","map":{"version":3,"sources":["C:/Users/Owner/Documents/UCF/Sandbox/shop-shop-redux/client/src/utils/helpers.js"],"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","request","window","indexedDB","open","db","tx","store","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","err","console","log","error","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close"],"mappings":"AAAA,OAAO,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;AACrC,MAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,WAAOD,IAAP;AACD;;AACD,SAAOA,IAAI,GAAG,GAAd;AACD;AAED,OAAO,SAASE,UAAT,CAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,MAAvC,EAA+C;AACpD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC;AACA,UAAMC,OAAO,GAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsB,WAAtB,EAAmC,CAAnC,CAAhB,CAFsC,CAItC;;AACA,QAAIC,EAAJ,EAAQC,EAAR,EAAYC,KAAZ,CALsC,CAOtC;;AACAN,IAAAA,OAAO,CAACO,eAAR,GAA0B,UAASC,CAAT,EAAY;AACpC,YAAMJ,EAAE,GAAGJ,OAAO,CAACS,MAAnB,CADoC,CAGpC;;AACAL,MAAAA,EAAE,CAACM,iBAAH,CAAqB,UAArB,EAAiC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAjC;AACAP,MAAAA,EAAE,CAACM,iBAAH,CAAqB,YAArB,EAAmC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAnC;AACAP,MAAAA,EAAE,CAACM,iBAAH,CAAqB,MAArB,EAA6B;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAA7B;AACD,KAPD,CARsC,CAiBtC;;;AACAX,IAAAA,OAAO,CAACY,OAAR,GAAkB,UAASC,GAAT,EAAc;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,MAAAA,OAAO,CAACE,KAAR,CAAcH,GAAd;AACD,KAHD,CAlBsC,CAuBtC;;;AACAb,IAAAA,OAAO,CAACiB,SAAR,GAAoB,UAAST,CAAT,EAAY;AAC9B;AACAJ,MAAAA,EAAE,GAAGJ,OAAO,CAACS,MAAb,CAF8B,CAG9B;;AACAJ,MAAAA,EAAE,GAAGD,EAAE,CAACc,WAAH,CAAexB,SAAf,EAA0B,WAA1B,CAAL,CAJ8B,CAK9B;;AACAY,MAAAA,KAAK,GAAGD,EAAE,CAACc,WAAH,CAAezB,SAAf,CAAR,CAN8B,CAQ9B;;AACAU,MAAAA,EAAE,CAACQ,OAAH,GAAa,UAASC,GAAT,EAAc;AACzBC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,GAArB;AACD,OAFD;;AAIA,cAAQlB,MAAR;AACE,aAAK,KAAL;AACEW,UAAAA,KAAK,CAACc,GAAN,CAAUxB,MAAV;AACAE,UAAAA,OAAO,CAACF,MAAD,CAAP;AACA;;AACF,aAAK,KAAL;AACE,gBAAMyB,GAAG,GAAGf,KAAK,CAACgB,MAAN,EAAZ;;AACAD,UAAAA,GAAG,CAACJ,SAAJ,GAAgB,YAAW;AACzBnB,YAAAA,OAAO,CAACuB,GAAG,CAACZ,MAAL,CAAP;AACD,WAFD;;AAGA;;AACF,aAAK,QAAL;AACEH,UAAAA,KAAK,CAACiB,MAAN,CAAa3B,MAAM,CAAC4B,GAApB;AACA;;AACF;AACEV,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA;AAhBJ,OAb8B,CAgC9B;;;AACAV,MAAAA,EAAE,CAACoB,UAAH,GAAgB,YAAW;AACzBrB,QAAAA,EAAE,CAACsB,KAAH;AACD,OAFD;AAGD,KApCD;AAqCD,GA7DM,CAAP;AA8DD","sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n    \n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(err) {\n      console.log('There was an error');\n      console.error(err);\n    };\n\n    // on database open success\n    request.onsuccess = function(e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // in case of errors, let us know\n      db.onerror = function(err) {\n        console.log('error', err);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      };\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}